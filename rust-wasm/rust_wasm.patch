0a1,42
> //////// PATCHED: inject needed polyfill ////////
> function TextDecoder() {}
> 
> TextDecoder.prototype.decode = function (octets) {
>     if (!octets) return;
>     var string = "";
>     var i = 0;
>     while (i < octets.length) {
>         var octet = octets[i];
>         var bytesNeeded = 0;
>         var codePoint = 0;
>         if (octet <= 0x7f) {
>             bytesNeeded = 0;
>             codePoint = octet & 0xff;
>         } else if (octet <= 0xdf) {
>             bytesNeeded = 1;
>             codePoint = octet & 0x1f;
>         } else if (octet <= 0xef) {
>             bytesNeeded = 2;
>             codePoint = octet & 0x0f;
>         } else if (octet <= 0xf4) {
>             bytesNeeded = 3;
>             codePoint = octet & 0x07;
>         }
>         if (octets.length - i - bytesNeeded > 0) {
>             var k = 0;
>             while (k < bytesNeeded) {
>                 octet = octets[i + k + 1];
>                 codePoint = (codePoint << 6) | (octet & 0x3f);
>                 k += 1;
>             }
>         } else {
>             codePoint = 0xfffd;
>             bytesNeeded = octets.length - i;
>         }
>         string += String.fromCodePoint(codePoint);
>         i += bytesNeeded + 1;
>     }
>     return string;
> };
> //////////////////////////////////////////
> 
20c61,63
< function getObject(idx) { return heap[idx]; }
---
> function getObject(idx) {
>     return heap[idx];
> }
36c79,82
< const cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });
---
> const cachedTextDecoder = new TextDecoder("utf-8", {
>     ignoreBOM: true,
>     fatal: true,
> });
47c93,96
<     if (cachedFloat32Memory0 === null || cachedFloat32Memory0.byteLength === 0) {
---
>     if (
>         cachedFloat32Memory0 === null ||
>         cachedFloat32Memory0.byteLength === 0
>     ) {
71c120
< */
---
>  */
73d121
< 
93,94c141,142
<     * @returns {Oscillator}
<     */
---
>      * @returns {Oscillator}
>      */
100,102c148,150
<     * @param {Float32Array} output
<     * @returns {boolean}
<     */
---
>      * @param {Float32Array} output
>      * @returns {boolean}
>      */
106c154,159
<         const ret = wasm.oscillator_process(this.ptr, ptr0, len0, addHeapObject(output));
---
>         const ret = wasm.oscillator_process(
>             this.ptr,
>             ptr0,
>             len0,
>             addHeapObject(output)
>         );
110,111c163,164
<     * @param {number} frequency
<     */
---
>      * @param {number} frequency
>      */
116,117c169,170
<     * @param {number} volume
<     */
---
>      * @param {number} volume
>      */
124,125c177,178
<     if (typeof Response === 'function' && module instanceof Response) {
<         if (typeof WebAssembly.instantiateStreaming === 'function') {
---
>     if (typeof Response === "function" && module instanceof Response) {
>         if (typeof WebAssembly.instantiateStreaming === "function") {
128d180
< 
130,132c182,186
<                 if (module.headers.get('Content-Type') != 'application/wasm') {
<                     console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
< 
---
>                 if (module.headers.get("Content-Type") != "application/wasm") {
>                     console.warn(
>                         "`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",
>                         e
>                     );
141d194
< 
147d199
< 
157,158c209,214
<     imports.wbg.__wbindgen_copy_to_typed_array = function(arg0, arg1, arg2) {
<         new Uint8Array(getObject(arg2).buffer, getObject(arg2).byteOffset, getObject(arg2).byteLength).set(getArrayU8FromWasm0(arg0, arg1));
---
>     imports.wbg.__wbindgen_copy_to_typed_array = function (arg0, arg1, arg2) {
>         new Uint8Array(
>             getObject(arg2).buffer,
>             getObject(arg2).byteOffset,
>             getObject(arg2).byteLength
>         ).set(getArrayU8FromWasm0(arg0, arg1));
160c216
<     imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
---
>     imports.wbg.__wbindgen_object_drop_ref = function (arg0) {
163c219
<     imports.wbg.__wbindgen_throw = function(arg0, arg1) {
---
>     imports.wbg.__wbindgen_throw = function (arg0, arg1) {
170,172c226
< function initMemory(imports, maybe_memory) {
< 
< }
---
> function initMemory(imports, maybe_memory) {}
180d233
< 
199,200c252,253
<     if (typeof input === 'undefined') {
<         input = new URL('rust_wasm_bg.wasm', import.meta.url);
---
>     if (typeof input === "undefined") {
>         input = new URL("rust_wasm_bg.wasm", import.meta.url);
204c257,261
<     if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
---
>     if (
>         typeof input === "string" ||
>         (typeof Request === "function" && input instanceof Request) ||
>         (typeof URL === "function" && input instanceof URL)
>     ) {
215c272
< export { initSync }
---
> export { initSync };
